<?php/** * Copy Right IJH.CC * Each engineer has a duty to keep the code elegant * $Id$ */if(!defined('__CORE_DIR')){    exit("Access Denied");}class Mdl_Waimai_Bills extends Mdl_Table{    protected $_table = 'waimai_bills';    protected $_pk = 'bills_id';    protected $_cols = 'bills_id,bills_sn,shop_id,status,amount,fee,dateline,shop_amount,roof_amount,freight,user_amount';    	public function create($data)	{		$data['dateline'] = __TIME;		$data['bills_sn'] = date('Ymd');		$format_sql = $this->_insert_sql($data);		$sql = 'INSERT INTO '.$this->table($this->_table).$format_sql.' ON DUPLICATE KEY UPDATE '.'amount=amount+'.$data['amount'].','.'fee=fee+'.$data['fee'].',shop_amount=shop_amount+'.$data['shop_amount'].',roof_amount=roof_amount+'.$data['roof_amount'].',freight=freight+'.$data['freight'].',user_amount=user_amount+'.$data['user_amount'];		return  $this->db->Execute($sql);	}	protected function _insert_sql($data)	{		ksort($data);		return "(`".implode("`,`",array_keys($data))."`) VALUES('".implode("','",$data)."')";	}    // 获取商家入驻至今所有销售情况 或 指定月销售情况    public function get_all_bussiness($shop=array(), $month_time=0)    {    	if (is_array($shop) && !empty($shop)) {    		if ($time_list = K::M('helper/date')->get_date_list($shop['dateline'],  __TIME)) {// 获取2个时间之间的月份数组（不论前后顺序）	            foreach($time_list as $k => $v){	                $data[$v] = array('month_amount'=>0, 'month_yyamount'=>0, 'month_yorder'=>0, 'month_norder'=>0);// 初始化	                $this_date = date('Y-m-d', $v);	                $end_month_time = strtotime("$this_date +1 month -1 day")+86399;	                $this_month = $v."~".$end_month_time;	                $month_amount = (float) $this->sum(array('dateline'=>$this_month,'shop_id'=>$shop['shop_id']), 'amount');// 总收入	                $month_fee = (float) $this->sum(array('dateline'=>$this_month,'shop_id'=>$shop['shop_id']), 'fee');// 平台服务费					$start_time = strtotime(date('Y-m-01',$v));  //获取本月第一天时间戳	                $data[$v]['month_amount'] = number_format($month_amount, 2);	                $data[$v]['month_yyamount'] = number_format(bcadd($month_amount, $month_fee, 2), 2);// 营业额：总金额 + 平台服务费					$filter_no = array(						'shop_id'=>$shop['shop_id'],						':SQL'=>'dateline >'.$start_time.' and dateline <'.$end_month_time,						'order_status'=>-1,						'from'=>'waimai'					);					$filter_yes = array(						'shop_id'=>$shop['shop_id'],						':SQL'=>'dateline >'.$start_time.' and dateline <'.$end_month_time,						'order_status'=>8,						'from'=>'waimai'					);	                $data[$v]['month_yorder'] = K::M('order/order')->count($filter_yes);	                $data[$v]['month_norder'] = K::M('order/order')->count($filter_no);	            }	            // 指定日期查询	            if ($month_time = (int) $month_time) { // 存在 负数	            	if ($month_time > 0) {	            		if ($data[$month_time]) {		            		$data[$month_time]['month'] = date('Y-m', $month_time);		            		return $data[$month_time];		            	}	            	}		            return array();	            }	            return $data;	        }    	}	    return array();    }	//预计收入 营业总额 有效订单 无效订单	public function get_day_business($shop_id,$time=0)	{		if($shop_id){			$day_list = K::M('helper/date')->get_day_list($time);			$array = array();			$filter = array();			$filter['bills_sn'] = $day_list;			$filter['shop_id'] = $shop_id;			$items = K::M('waimai/bills')->items($filter,array(),1,9999,$count);			foreach ($day_list as $v){				$filter_order = array();				$filter_order['from'] ='waimai';				$filter_order['shop_id'] = $shop_id;				$filter_order['order_status'] = -1;				$filter_order[':SQL'] = 'dateline >'.strtotime($v).' and dateline <'.(strtotime($v)+86399);				$array[$v] = array(					'day_amount' => 0,//预计					'day_yuji'=>0,//					'day_order_yes'=>0,					'day_order_no'=>K::M('order/order')->count($filter_order),					'day'=>date('m-d',strtotime($v))				);				foreach ($items  as $v1){					if($v==$v1['bills_sn']){						$array[$v]['day_yuji'] = $v1['amount']+$v1['fee'];						$array[$v]['day_order_yes'] = $array[$v]['day_order_yes']+1;						$array[$v]['day_amount'] =$v1['amount'];					}				}			}			return array_values($array) ;		}else{			return array();		}	}    public function get_bills_amount($month)    {        $month_time = strtotime($month)."~".(strtotime($month."+1 month")-1);        $data = array();        $data['fee'] = K::M('waimai/bills')->sum(array('dateline'=>$month_time),'fee');        $data['roof_amount'] = K::M('waimai/bills')->sum(array('dateline'=>$month_time),'roof_amount');        $data['roof'] = $data['fee'] - $data['roof_amount'];        $last_month_time = strtotime(date("Y-m-01",strtotime($month))."-1 month")."~".(strtotime($month)-1);        $data['last_fee'] = K::M('waimai/bills')->sum(array('dateline'=>$last_month_time),'fee');        $data['last_roof_amount'] = K::M('waimai/bills')->sum(array('dateline'=>$last_month_time),'roof_amount');        $data['last_roof'] = $data['last_fee'] - $data['last_roof_amount'];        $data['amount'] = K::M('waimai/bills')->sum(array('dateline'=>$month_time),'amount');        $data['shop_amount'] = K::M('waimai/bills')->sum(array('dateline'=>$month_time),'shop_amount');        $data['shop'] =  $data['amount']-$data['shop_amount'];        $data['last_amount'] = K::M('waimai/bills')->sum(array('dateline'=>$last_month_time),'amount');        $data['shop_amount'] = K::M('waimai/bills')->sum(array('dateline'=>$last_month_time),'shop_amount');        $data['last_shop'] =   $data['last_amount']-$data['shop_amount'];        return $data;    }    public function get_roof_month_amount($month)    {        $day_list = K::M('helper/date')->get_day_list($month);        $day_list_last = K::M('helper/date')->get_day_list(date("Y-m",strtotime(date("Y-m-01",strtotime($month))."-1 month"))); //上月        $data1 = $data2 = array();        $items = K::M('waimai/bills')->items(array('bills_sn'=>$day_list),array(),1,9999);        $items_last = K::M('waimai/bills')->items(array('bills_sn'=>$day_list_last),array(),1,9999);        foreach ($day_list as $v){            $data1[$v] = array(                'day_amount' => 0,//平台收入                'day'=>date('m-d',strtotime($v))            );            foreach ($items as $v1){                if($v==$v1['bills_sn']){                    $data1[$v]['day_amount'] = ($v1['fee'] - $v1['roof_amount']);                }            }        }        foreach ($day_list_last as $v){            $data2[$v] = array(                'day_amount' => 0,//平台收入                'day'=>date('m-d',strtotime($v))            );            foreach ($items_last as $v1){                if($v==$v1['bills_sn']){                    $data2[$v]['day_amount'] = ($v1['fee'] - $v1['roof_amount']);                }            }        }        $data = array(            "this" => $data1,            "last" => $data2        );        return $data;    }    public function items_join_by_shop_id($filter,$page=1,$limit=50){        $where = $this->where($filter);        $limit = $this->limit($page, $limit);        $sql = "SELECT SUM(amount) as amount,SUM(fee) as fee ,`shop_id`   FROM ".$this->table($this->_table)." WHERE {$where} GROUP BY `shop_id` $limit";        $items = array();        if($rs = $this->db->Execute($sql)){            while($row = $rs->fetch()){                $items[$row['shop_id']] = $row;            }        }        return $items;    }    public function entry($bills_id){	    if(!$bills_id){	       return false;        }else if(!$bills = $this->detail($bills_id)){            return false;        }else if($bills['status']==1){            return false;        }else if(!$items = K::M('waimai/billslog')->items(array('bills_id'=>$bills_id))){            return false;        }else  if($bills['bills_sn']>=date('Ymd')){            return false;        } else{            $this->db->begin();            $this->update($bills_id,array('status'=>1));            $intro = sprintf('您%s的对账单已入账：金额:%s', $bills['bills_sn'], $bills['amount']);            if($log_id = K::M('shop/shop')->update_money($bills['shop_id'], $bills['amount'], $intro, '')){                K::M('shop/log')->update($log_id,array('extend'=>serialize(array('type'=>1,'can_id'=>$bills_id))));                K::M('waimai/billslog')->update_status($bills_id);            }            if($this->db->tranform_errno>0){                $this->db->rollback();                return false;            }else{                $this->db->commit();                return true;            }        }    }    public function group_by_type($filter,$stime,$ltime,$order_by = array('dateline'=>"DESC")){        $where = $this->where($filter);        $order_by = $this->order($order_by);        $data = K::M('helper/date')->get_arr_by_type($stime,$ltime,'d');        $arr = $items = array();        $sql = "SELECT  SUM(fee-roof_amount) as fee,SUM(amount - shop_amount) as amount,`bills_sn` FROM ".$this->table($this->_table)." WHERE {$where} GROUP BY `bills_sn`  {$order_by}";        if($rs = $this->db->Execute($sql)){            while($row = $rs->fetch()){                $items[$row['bills_sn']] = $row;            }        }        $arr['x'] = range(1,31);        foreach ($data as $k=>$v){            $arr['fee'][] = $items[$k]['fee']?(float)$items[$k]['fee']:0;            $arr['amount'][] = $items[$k]['amount']?(float)$items[$k]['amount']:0;        }        return $arr;    }}