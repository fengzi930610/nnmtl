<?php/** * Copy Right IJH.CC * Each engineer has a duty to keep the code elegant * $Id$ */if(!defined('__CORE_DIR')){    exit("Access Denied");}class Mdl_Shop_Shop extends Mdl_Table{    protected $_table = 'shop';    protected $_pk = 'shop_id';    protected $_cols = 'shop_id,city_id,contact,cate_id,mobile,phone,title,passwd,money,total_money,tixian_money,tixian_percent,have_waimai,have_tuan,have_quan,have_maidan,have_paidui,have_dingzuo,have_diancan,have_weidian,have_fenxiao,fenxiao_type,closed,lng,lat,banner,logo,score,business_id,area_id,addr,avg_amount,comments,audit,clientip,dateline,max_youhui,intro,info,verify_name,orderby,is_wifi,is_cart,refuse,tuan_bl,maidan_bl,business_time';    protected $_orderby = array('orderby'=>'ASC', 'score'=>'DESC', 'shop_id'=>'DESC');    public function create($data, $checked=false)    {        if(!$checked && !$data = $this->_check_schema($data)){            return false;        }        $data['clientip'] = $data['clientip'] ? $data['clientip'] : __IP;        $data['dateline'] = $data['dateline'] ? $data['dateline'] : __TIME;        if($shop_id = $this->db->insert($this->_table, $data, true)){            $this->flush();        }           return $shop_id;    }    public function shop($u, $l='shop_id')    {        $l = strtolower($l);        switch ($l) {            case 'shop_id':                $field = 'shop_id';                break;            case 'mobile':                $field = 'mobile';                break;            default:                return false;        }        $sql = "SELECT * FROM " . $this->table($this->_table) . " WHERE " . $this->field($field, $u);        if ($row = $this->db->GetRow($sql)) {            $row = $this->_format_row($row);        }        return $row;    }    protected function _format_row($row)    {        static $cate_list = null;        static $city_list = null;        if($cate_list === null){            $cate_list = K::M('shop/cate')->fetch_all();        }        if($city_list = null){            $city_list = K::M('data/city')->fetch_all();        }        $row['city_name'] = $city_list[$row['city_id']]['city_name'];        //$cate = K::M('shop/cate')->detail($row['cate_id']);        $cate = $cate_list[$row['cate_id']];        if($cate['parent_id']){            $row['parent_id'] = $cate['parent_id'];        }                if($cate = $cate_list[$row['cate_id']]){            $row['cate_title'] = $row['cate_name'] = $cate['title'];        }                if($parent = $cate_list[$row['parent_id']]){            $row['cate_title'] = $parent['title'].'-'.$row['cate_title'];            $row['cate_name']  = $parent['title'].'-'.$row['cate_name'];        }        if($row['comments']){            $row['avg_score'] = $row['score']/$row['comments'];        }else{            $row['avg_score'] = 0;        }        if(!$row['logo']){            $row['logo'] = 'default/shop_logo.png';        }        if(!$row['banner']){            $row['banner'] = 'default/shop_logo.png';        }        $row['lat'] = bcdiv($row['lat'], 1000000,6);        $row['lng'] = bcdiv($row['lng'], 1000000,6);        return $row;    }    public function change_youhui($shop_id)    {        if($shop_id = (int)$shop_id){            $res = K::M('shop/youhui')->items(array('shop_id'=>$shop_id));            K::M('shop/shop')->update($shop_id,array('youhui'=>serialize($res)));            return true;        }else{            return false;        }    }    public function update_money($shop_id, $money, $intro, $admin='')    {        if(($shop_id = (int)$shop_id) && ($money = (float)$money)){            $shop = $this->detail($shop_id);            if($money > 0){                $sql = "UPDATE ".$this->table($this->_table)." SET `money`=`money`+{$money}, `total_money`=`total_money`+{$money} WHERE shop_id='$shop_id'";            }else if(($shop['money']+$money)>=0){                $sql = "UPDATE ".$this->table($this->_table)." SET `money`=`money`+{$money} WHERE shop_id='$shop_id'";            }else{                return false;            }            if($this->db->Execute($sql)){                $money_format =$shop['money']+$money;                return K::M('shop/log')->create(array('shop_id'=>$shop_id, 'money'=>$money, 'intro'=>$intro, 'admin'=>$admin,'balance'=>$money_format));            }        }        return false;    }        public function tixian($shop_id, $money, $shop=null)    {        if(($shop == null) && !($shop = $this->detail($shop_id))){            return false;        }else if(!$money = (float)$money){            $this->msgbox->add('提现金额不正确', 411);        }else if($money > $shop['money']){            $this->msgbox->add('提现金额不正确', 412);        }else if(!$account = K::M('shop/account')->detail($shop_id)){            $this->msgbox->add('未设置提现帐号', 413);        }else{            $account_info = $account['account_type'].'('.$account['account_name'].','.$account['account_number'].')';            if($this->update_money($shop_id, -$money, '账户资金提现:'.$account_info)){                $end_money = $money;                return K::M('shop/tixian')->create(array('shop_id'=>$shop_id, 'money'=>$money, 'account_info'=>$account_info,'status'=>0, 'end_money'=>$end_money,'payee_account' => $account['account_number']));            }        }        return false;    }    public function addMoney($shop_id, $money, $intro='', $admin='')    {        return $this->update_money($shop_id, $money, $intro, $admin);    }    public function update_mobile($shop_id, $mobile)    {        if(!$shop_id = (int)$shop_id){            return false;        }else if(!$mobile = K::M('verify/check')->mobile($mobile)){            $this->msgbox->add('手机号码不正确', 451)->response();        }else if($a = $this->shop($mobile, 'mobile')){            if($a['shop_id'] == $shop_id){                return true;            }else{                $this->msgbox->add('该手机号已经被其他商户使用', 452)->response();            }        }else if($this->update($shop_id, array('mobile'=>$mobile))){            return true;        }        return false;    }    // 恢复回收站    public function regain($val)    {        $ret = false;        if(!empty($val)) {            if(is_array($val)){                $val = implode(',', $val);            }            if(!K::M('verify/check')->ids($val)){                return false;            }            $val = explode(',', $val);            $ret = $this->db->update($this->_table, array('closed'=>0), self::field($this->_pk, $val));            $this->clear_cache($val);        }        return $ret;    }    public function send($shop_id, $title, $content, $extras=array())    {                if($res = K::M('jpush/device')->send_shop($shop_id, $title, $content, $extras)){            if(is_numeric($shop_id)){                $a = array('shop_id'=>$shop_id, 'title'=>$title, 'content'=>$content);                //0:所有消息 1:订单消息, 2:评价消息,3:投诉消息,4:系统 消息                 switch ($extras['type']) {                    case 'order': case 1: case 'newOrder': case 'tuiOrder': case 'cuiOrder':                        $a['order_id'] = (int)$extras['order_id'];                        $a['type'] = 1; break;                    case 'comment': case 2:                        $a['type'] = 2; break;                    case 'complaint': case 3:                        $a['type'] = 3; break;                    case 4:                        $a['type'] = 4; break;                     default:                        $a['type'] = 0; break;                }                K::M('shop/msg')->create($a);            }        }        return $res;    }    protected function _check($row, $shop_id=null)    {        if(isset($row['passwd']) && !preg_match('/^[0-9a-f]{32}$/i', $row['passwd'])){            if($shop_id && $row['passwd'] == '******'){                unset($row['passwd']);            }else{                $row['passwd'] = md5($row['passwd']);            }        }         if(isset($row['mobile'])){            $mobile = $row['mobile'];            if($a = $this->shop($mobile, 'mobile')){                if(empty($shop_id) || ($a['shop_id'] != $shop_id)){                    $this->msgbox->add(L('手机号码已经存在'), 511);                }            }        }        if(isset($row['lat'])){            $row['lat'] = round(bcmul($row['lat'], 1000000));        }         if(isset($row['lng'])){            $row['lng'] = round(bcmul($row['lng'], 1000000));        }             return parent::_check($row, $shop_id);    }    public function where($filter=null, $pre='', $ANDOR='AND')    {        if(is_array($filter)){            if(isset($filter['lat'])){                if(preg_match('/^([\-\d\.]+)~([\-\d\.]+)$/', $filter['lat'], $m)){                    $filter['lat'] = bcmul($m[1], 1000000).'~' . bcmul($m[2], 1000000);                }else{                    $filter['lat'] = bcmul($filter['lat'], 1000000);                }            }            if(isset($filter['lng'])){                if(preg_match('/^([\-\d\.]+)~([\-\d\.]+)$/', $filter['lng'], $m)){                    $filter['lng'] = bcmul($m[1], 1000000).'~' . bcmul($m[2], 1000000);                }else{                    $filter['lng'] = bcmul($filter['lng'], 1000000);                }            }                             }        return parent::where($filter, $pre, $ANDOR);    }    public function check_date($date="")    {        if ($date) {            if ($d_arr = explode(':', $date)) {                if ((int)$d_arr[0] < 10) {                    $d_arr[0] = "0".(int)$d_arr[0];                }elseif ((int)$d_arr[0] >= 24) {                    $d_arr[0] = "23";                }                if ((int)$d_arr[1] >= 60) {                    $d_arr[1] = "59";                }                return implode(':', $d_arr);            }        }        return false;    }    public function update($val, $data, $checked = false)    {      $res =   parent::update($val, $data, $checked);        $this->flush();        return  $res;// TODO: Change the autogenerated stub    }    public function detail($pk, $closed=false)    {        if(!$pk = (int)$pk){            return false;        }        $this->_checkpk();        $where = self::field($this->_pk, $pk);               $sql = "SELECT * FROM ".$this->table($this->_table)." WHERE $where";        if($detail = $this->db->GetRow($sql)){            $detail = $this->_format_row($detail);        }        return $detail;    }        public function items_by_verify($filter, $orderby, $page=1, $limit=10, &$count=0)    {        $where = '1';        $ext_sql = '';        if(is_array($filter)){            if(isset($filter['ext']['verify'])){                $where = K::M('shop/verify')->where($filter['ext'], 'ext.');                $ext_sql = " LEFT JOIN ".$this->table('shop_verify')." ext ON o.`shop_id`=ext.`shop_id` ";            }        }        $where = $where ." AND ". $this->where($filter, 'o.');        $orderby = $this->order($orderby);        $limit = $this->limit($page, $limit);        $sql = "SELECT COUNT(*) FROM ".$this->table($this->_table) . " o " . $ext_sql . " WHERE $where";        if($count = $this->db->GetOne($sql)){            $sql = "SELECT ext.verify,o.* FROM ". $this->table($this->_table)." o $ext_sql WHERE $where $orderby $limit";            if($rs = $this->db->Execute($sql)){                while($row = $rs->fetch()){                    $row = $this->_format_row($row);                    if($row[$this->_pk]){                        $items[$row[$this->_pk]] = $row;                    }else{                        $items[] = $row;                    }                }            }        }        return $items;    }}