<?php/** * Copy Right IJH.CC * Each engineer has a duty to keep the code elegant * $Id$ */if(!defined('__CORE_DIR')){    exit("Access Denied");}use OSS\OssClient;use OSS\Core\OssException;class Mdl_Storage_Aliyun{    static protected $OSS_ACCESS_ID = '';    static protected $OSS_ACCESS_KEY = '';    static protected $OSS_ENDPOINT = 'img01.jhcms.com';    static protected $OSS_BUCKET = 'jhcms01';    static protected $OSS_ISCNAME = true;    static protected $OSS_PREFIX = 'jhcms01/';    public function __construct($system)    {        Import::L('storage/aliyun/OSS/OssClient.php');        self::$OSS_ACCESS_ID = OSS_ACCESS_ID;        self::$OSS_ACCESS_KEY = OSS_ACCESS_KEY;        self::$OSS_ENDPOINT = OSS_ENDPOINT;        self::$OSS_ISCNAME = OSS_ISCNAME;        self::$OSS_PREFIX = OSS_PREFIX;        self::$OSS_BUCKET = OSS_BUCKET;    }    /**     * 根据Config配置，得到一个OssClient实例     *     * @return OssClient 一个OssClient实例     */    public function OssClient()    {        static $ossClient = null;        if($ossClient === null){            try {                $ossClient = new OssClient(self::$OSS_ACCESS_ID, self::$OSS_ACCESS_KEY, self::$OSS_ENDPOINT, self::$OSS_ISCNAME);            } catch (OssException $e) {                printf(__FUNCTION__ . "creating OssClient instance: FAILED\n");                printf($e->getMessage() . "\n");                return null;            }        }        return $ossClient;    }    public function BucketName()    {        return self::$OSS_BUCKET;    }    /**     * 工具方法，创建一个存储空间，如果发生异常直接exit     */    public function createBucket()    {        $ossClient = $this->OssClient();        if (is_null($ossClient)) exit(1);        $bucket = $this->BucketName();        $acl = OssClient::OSS_ACL_TYPE_PUBLIC_READ;        try {            $ossClient->createBucket($bucket, $acl);            return true;        } catch (OssException $e) {            $message = $e->getMessage();            if (\OSS\Core\OssUtil::startsWith($message, 'http status: 403')) {                echo "Please Check your AccessKeyId and AccessKeySecret" . "\n";                exit(0);            } elseif (strpos($message, "BucketAlreadyExists") !== false) {                echo "Bucket already exists. Please check whether the bucket belongs to you, or it was visited with correct endpoint. " . "\n";                exit(0);            }            return false;        }    }    public function upload($file, $object=null, $remove=false)    {        // 先把本地的$file上传到指定$bucket, 命名为$object        if($object === null){            $cfg = K::$system->config->get('attach');            $object = substr($file, strlen($cfg['attachdir']));            $object = str_replace('\\', '/', $object);        }        $object = self::$OSS_PREFIX.$object;        $res = $this->OssClient()->uploadFile($this->BucketName(), $object, $file);        if($remove){            K::M('io/file')->remove($file);        }        return $res;    }    public function download($object, $file)    {    }}